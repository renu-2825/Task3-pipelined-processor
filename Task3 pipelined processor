module pipelined_processor (
    input clk,
    input reset
);
    // Instruction encoding:
    // [15:12]=opcode, [11:8]=rd, [7:4]=rs1, [3:0]=rs2/imm
    // opcode: 4'b0000=ADD, 4'b0001=SUB, 4'b0010=LOAD

    reg [15:0] instr_mem [0:15]; // 16 instructions
    reg [7:0] data_mem [0:15];   // 16 data memory locations
    reg [7:0] regfile [0:7];     // 8 registers

    reg [3:0] pc;

    // Pipeline registers
    reg [15:0] IF_ID_instr;
    reg [3:0]  IF_ID_pc;

    reg [15:0] ID_EX_instr;
    reg [7:0]  ID_EX_rs1_data;
    reg [7:0]  ID_EX_rs2_data;
    reg [3:0]  ID_EX_pc;

    reg [15:0] EX_WB_instr;
    reg [7:0]  EX_WB_result;
    reg [3:0]  EX_WB_rd;

    // Simulation: display pipeline states
    initial begin
        // Preload sample program: ADD r1, r2, r3; SUB r4, r1, r2; LOAD r5, [r4]
        instr_mem[0] = {4'b0000, 4'd1, 4'd2, 4'd3}; // ADD r1, r2, r3
        instr_mem[1] = {4'b0001, 4'd4, 4'd1, 4'd2}; // SUB r4, r1, r2
        instr_mem[2] = {4'b0010, 4'd5, 4'd4, 4'd0}; // LOAD r5, [r4]
        instr_mem[3] = 16'b0;

        // Register and memory initial values
        regfile[2] = 8'd10;  // r2 = 10
        regfile[3] = 8'd20;  // r3 = 20
        data_mem[8] = 8'd55; // memory[8] = 55
    end

    // IF Stage
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            pc <= 0;
            IF_ID_instr <= 0;
            IF_ID_pc <= 0;
        end else begin
            IF_ID_instr <= instr_mem[pc];
            IF_ID_pc <= pc;
            pc <= pc + 1;
        end
    end

    // ID Stage
    wire [3:0] id_opcode = IF_ID_instr[15:12];
    wire [2:0] id_rd     = IF_ID_instr[11:9];
    wire [2:0] id_rs1    = IF_ID_instr[8:6];
    wire [2:0] id_rs2    = IF_ID_instr[5:3];

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            ID_EX_instr <= 0;
            ID_EX_rs1_data <= 0;
            ID_EX_rs2_data <= 0;
            ID_EX_pc <= 0;
        end else begin
            ID_EX_instr <= IF_ID_instr;
            ID_EX_rs1_data <= regfile[IF_ID_instr[8:6]];
            ID_EX_rs2_data <= regfile[IF_ID_instr[5:3]];
            ID_EX_pc <= IF_ID_pc;
        end
    end

    // EX Stage
    wire [3:0] ex_opcode = ID_EX_instr[15:12];
    wire [2:0] ex_rd     = ID_EX_instr[11:9];
    wire [2:0] ex_rs1    = ID_EX_instr[8:6];
    wire [2:0] ex_rs2    = ID_EX_instr[5:3];

    reg [7:0] alu_out;
    always @(*) begin
        case (ex_opcode)
            4'b0000: alu_out = ID_EX_rs1_data + ID_EX_rs2_data; // ADD
            4'b0001: alu_out = ID_EX_rs1_data - ID_EX_rs2_data; // SUB
            4'b0010: alu_out = data_mem[ID_EX_rs1_data];        // LOAD
            default: alu_out = 0;
        endcase
    end

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            EX_WB_instr <= 0;
            EX_WB_result <= 0;
            EX_WB_rd <= 0;
        end else begin
            EX_WB_instr <= ID_EX_instr;
            EX_WB_result <= alu_out;
            EX_WB_rd <= ex_rd;
        end
    end

    // WB Stage
    wire [3:0] wb_opcode = EX_WB_instr[15:12];
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // do nothing
        end else begin
            if (wb_opcode == 4'b0000 || wb_opcode == 4'b0001 || wb_opcode == 4'b0010)
                regfile[EX_WB_rd] <= EX_WB_result;
        end
    end

    // Debug output for simulation
    always @(posedge clk) begin
        $display("Time=%0t | IF: PC=%0d Instr=%h | ID: Instr=%h | EX: Instr=%h | WB: Instr=%h",
            $time, pc, IF_ID_instr, ID_EX_instr, EX_WB_instr, EX_WB_instr);
        $display("Regfile: r1=%d r2=%d r3=%d r4=%d r5=%d", regfile[1], regfile[2], regfile[3], regfile[4], regfile[5]);
        $display("---------------------------------------------------------");
    end

endmodule
module testbench;
    reg clk, reset;

    pipelined_processor uut(
        .clk(clk),
        .reset(reset)
    );

    initial begin
        clk = 0;
        reset = 1;
        #5 reset = 0;
        repeat (12) begin
            #5 clk = ~clk;
            #5 clk = ~clk;
        end
        $finish;
    end
endmodule
